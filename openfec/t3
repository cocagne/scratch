#!/usr/bin/python 

import os
import os.path

from openfec import *

# TODO: Use large symbol size for all but last block. For last block, use
#       the symbol size that minimizes the number of padding bytes
#

def encode_file(filename, output_dir, codec, num_parts, num_required, symbol_size=4096):
	
	if not os.path.isfile( filename ):
		raise Exception('Invalid file: ' + filename)

	base_name     = os.path.basename(filename)
	total_symbols = num_parts
	num_symbols   = num_required
	num_repair    = total_symbols - num_required
	file_size     = os.stat(filename).st_size
	
	chunk_size  = symbol_size * num_symbols
	
	npadding    = (file_size % chunk_size)
	
	total_bytes = file_size + npadding
	
	
	source = open( filename, 'rb' )
	
	if not os.path.isdir( output_dir ):
		os.makedirs( output_dir )
		
	parts = list()
	
	for i in range(0, num_parts):
		parts.append( open( os.path.join(output_dir, base_name + '_%03d' % i), 'wb' ) )
			
	while True:
		chunk = source.read( chunk_size )
		
		if not chunk:
			break
		
		if len(chunk) != chunk_size:
			chunk += '\0' * npadding
		
		
		symbols_array = list()
		
		last = 0
		next = 0
		for i in range(0,num_symbols):
			last = next
			next += symbol_size
			symbols_array.append( chunk[last:next] )
			
		repairs = encode(codec, symbols_array, num_repair)
	
		symbols_array.extend( repairs )
		
		for i in range(0, len(symbols_array)):
			parts[i].write( symbols_array[i] )
			
	print 'file size  = ', file_size
	print 'padding    = ', npadding
	print 'chunk_size = ', chunk_size
	for p in parts:
		p.flush()
		p.close()
		
		
		
		
def decode_file(dest_file, base_filename, file_size, parts_dir, codec, num_parts, num_required, symbol_size=4096):
	if not os.path.isdir( parts_dir ):
		raise Exception('Invalid file: ' + filename)

	total_symbols = num_parts
	num_symbols   = num_required
	num_repair    = total_symbols - num_required
	
	
		
	parts  = list()
	nparts = 0
	
	for i in range(0, num_parts):
		part_fn = os.path.join(parts_dir, base_filename + '_%03d' % i)
		if os.path.exists( part_fn ):
			parts.append( open( part_fn, 'rb' ) )
			nparts += 1
		else:
			parts.append( None )
			
	if nparts < num_required:
		raise Exception('Insufficient parts for file decoding')
	
	dest = open( dest_file, 'wb' )
	
	try:
		nleft = file_size
			
		while nleft:
			symbols_array = list()
			
			for p in parts:
				if p is None:
					symbols_array.append( None )
				else:
					symbols_array.append( p.read(symbol_size) )
				
			decode(codec, num_symbols, num_repair, symbols_array)
		
			for i in range(0, num_symbols):
				if nleft == 0:
					break
				if nleft < symbol_size:
					dest.write( symbols_array[i][0 : nleft] )
					nleft = 0
				else:
					dest.write( symbols_array[i] )
					nleft -= symbol_size
					
		dest.flush()
		dest.close()
	except Exception:
		os.unlink( dest_file )
		raise
				
	
		
		
def test():
	import time
	#src_file    = '/home/rakis/Downloads/openfec-1.2.1.tgz'
	src_file    = '/home/rakis/devel/temp/Python-2.7.tar.bz2'
	parts_dir   = '/tmp/tdir'
	tgt_file    = '/tmp/tdecode'
	symbol_size = 4096 * 2
	
	num_parts    = 100
	num_required = 93
	codec        = OF_CODEC_REED_SOLOMON_GF_2_8_STABLE
	
	if os.path.exists( parts_dir ):
		os.system('rm -r %s' % parts_dir)
	if os.path.exists( tgt_file ):
		os.system('rm -f %s' % tgt_file)
	
	senc = time.time()
	encode_file(src_file, parts_dir, codec, num_parts, num_required, symbol_size)
	eenc = time.time()
	
	base_filename = os.path.basename(src_file)
	file_size     = os.stat(src_file).st_size
	
	os.unlink( '%s/%s_003' % (parts_dir, base_filename) )
	
	sdec = time.time()
	decode_file(tgt_file, base_filename, file_size, parts_dir, codec, num_parts, num_required, symbol_size)
	edec = time.time()
	
	fmb = file_size / 1024.0 / 1024.0
	etime = eenc - senc
	dtime = edec - sdec
	print 'Encoding time: %f sec, %f Mb/sec' % ( etime, fmb/etime )
	print 'Decoding time: %f sec, %f Mb/sec' % ( dtime, fmb/dtime )
	
test()
			
		
			
	
		

	
		
	